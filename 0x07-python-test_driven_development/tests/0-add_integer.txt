The ``0-add_integer`` module
======================

Importing module:
>>> add_integer = __import__('0-add_integer').add_integer

Tests:
2 positive ints
>>> add_integer(1, 2)
3

Negative first arg
>>> add_integer(-1, 2)
1

Negative second arg
>>> add_integer(2, -1)
1

Only 1 arg
>>> add_integer(1)
99

Default arg works
>>> add_integer(0)
98

Both are 0
>>> add_integer(0, 0)
0

Pass ``a`` as float
>>> add_integer(1.0, 2)
3

Pass ``b`` as float
>>> add_integer(1, 2.0)
3

Pass infinity as a
>>> add_integer(float("inf"), 1)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Pass infinity as b
>>> add_integer(1, float("inf"))
Traceback (most recent call last):
    ...
TypeError: b must be an integer

Pass -infinity as a
>>> add_integer(float("-inf"), 1)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Pass -infinity as b
>>> add_integer(1, float("-inf"))
Traceback (most recent call last):
    ...
TypeError: b must be an integer

None as arg
>>> add_integer(None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

String as arg
>>> add_integer(1, "toto")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

Tuple as arg
>>> add_integer(1, (1, 2))
Traceback (most recent call last):
    ...
TypeError: b must be an integer

List as arg
>>> add_integer(1, [1, 2])
Traceback (most recent call last):
    ...
TypeError: b must be an integer